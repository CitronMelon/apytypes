#include "../apy_fixed.h"
#include "catch.hpp"
#include <iostream>

using int64_vec = std::vector<int64_t>;

TEST_CASE("APyFixed::operator+()")
{

    { /* Test #1 */
        APyFixed op_a(3,2, int64_vec{3});  //  1.5
        APyFixed op_b(3,2, int64_vec{4});  // -2.0
        REQUIRE((op_a+op_b).to_string() == "-0.5");
        REQUIRE((op_a+op_b).int_bits()  == 3);
        REQUIRE((op_a+op_b).bits()      == 4);
    }

    { /* Test #2 */
        APyFixed op_a(1, 1, int64_vec{0x1});  // -1.0
        APyFixed op_b(1, 0, int64_vec{0x1});  // -0.5
        REQUIRE((op_a+op_b).to_string() == "-1.5");
        REQUIRE((op_a+op_b).int_bits()  == 2);
        REQUIRE((op_a+op_b).bits()      == 3);
    }

    { /* Test #3 */
        // 306538369.1376953125
        APyFixed op_a(100, 40, int64_vec{0x1234000000000000, 0x1245678});
        
        // 68.5000000000000005176294573636282259077034950678353197872638702392578125
        APyFixed op_b(140, 10, int64_vec{0x5000000000000000, 0x9532, 0x4112});

        REQUIRE((op_a+op_b).bits() == 171);
        REQUIRE((op_a+op_b).int_bits() == 41);
        REQUIRE(
            (op_a+op_b).to_string() 
            == "306538437.6376953125000005176294573636282259077034950678353197872638702"
               "392578125"
        );
    }

    { /* Test #4 */
        // -1376018206341311063223476816643092256070737014626379103 . 333722579872958071
        // 25524454925113357466717155170817730949191595227275433693130914953560418897590
        // 39318819041188919128295529391018620171426887089049524586544425547230810831862
        // 10082207584128592922850820472478833257136662269306798708182072507551281664490
        // 00344149373334940301798201556238154807942919433116912841796875
        APyFixed op_a(
            512, 200,
            int64_vec{
                int64_t(0x1429404125123152),
                int64_t(0x1245451212312342),
                int64_t(0x1424F0A218B18CCC),
                int64_t(0x124011012151FEEA),
                int64_t(0xA0AA912831824717),
                int64_t(0x192A91B39812391A),
                int64_t(0x123ABCA124150012),
                int64_t(0xFFFFF1A23A231245),
            }
        );

        // 104491155816182282723870707435 . 07130915702294181199648733508218526673682167
        // 51134888692102807526475581042423404375123142085554173487953532797496647296743
        // 83359218292851614133807578802711842945924832570086981259561710540885280955749
        // 26913045967732484776422348317640480398784470978913122864899877977059246351177
        // 87068390253758772030239322904571506147146306231551353267916553216615029494769
        // 80808972834127647429103280529716357705183327198028564453125
        APyFixed op_b(
            512, 100,
            int64_vec{
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
                int64_t(0x151A10EEB1241512),
            }
        );
        REQUIRE(
            (op_a+op_b).to_string()
            == "-1376018206341311063223476712151936439888454290755671668" "." "26241342"
               "28500162592587572141689483079303498765946884402816351996251962326889687"
               "12023289980420486583086550839142248099878555742643724291074575097373655"
               "94259960879824851309922882264587358770764189507120334837357981181450508"
               "33155317772685197065718753587747924949535788105544702368555425227035519"
               "91307236837960818135285369376844864673208344678338497050523019191027165"
               "872352570896719470283642294816672801971435546875"
        );
    }

}

TEST_CASE("APyFixed::operator-()")
{

}
